class GfG
{Node solve(Node h1,Node h2){
       
       //if first linked list have only one element then
       if(h1.bottom==null){
           h1.bottom=h2;
           return h1;
       }
       Node curr1=h1;
       Node next1=curr1.bottom;
       Node curr2=h2;
       Node next2=curr2.bottom;
       
       while(next1!=null&&curr2!=null){
           if(curr2.data>=curr1.data&&curr2.data<=next1.data){
               curr1.bottom=curr2;
               next2=curr2.bottom;
               curr2.bottom=next1;
               curr1=curr2;
               curr2=next2;
                
                   
           }
         
           else{
               curr1=curr1.bottom;
               next1=next1.bottom;
              if(next1==null){
                   curr1.bottom=curr2;
                  
               }
             //check is list one is now ended
           //  5 7 8 10 19 20 22 28 30 
          // 5 7 8 10 19 20 22 28 30 35 40 45 50 
                }
          }
       return h1;
   }
    //Function to merge two sorted linked list.
    Node sortedMerge(Node head1, Node head2)
    
    {
           //here basically checking if any of the linked list is empty
    if(head1==null){
        return head2;
    }
    
    if(head2==null){
        return head1;
    }
    
    Node h1=head1;
    Node h2=head2;
    if(head1.data<=head2.data){
       return solve(head1,head2);
    }
    
    else{
       return solve(head2,head1);
    }
 } 
    Node flatten(Node root)
    {
        if(root==null){
            return null;
        }
        if(root.next==null){
            return root;
        }
        Node temp1=root;
	Node temp2=root.next;
	while(temp2!=null){
	   temp1= sortedMerge(temp1,temp2);
	    temp2=temp2.next;
	}
	
	return temp1;
    }
}